%package

%headers

import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.lang.StringBuilder;

public class %classnameParser {
    private %classnameLexer lex;

    public static class Tree {
        private final String name;
        private final ArrayList<Tree> children;
        private Object userData;
        boolean isTerminal;

        private Tree(String name) {
            this.name = name;
            children = new ArrayList<>();
        }
        void add(Tree ... trees) {
            children.addAll(Arrays.asList(trees));
        }
        private void getText(StringBuilder builder) {
            if(isTerminal) {
                builder.append(name);
            } else {
                for(Tree t : children) {
                    t.getText(builder);
                }
            }
        }
        public String getText() {
            if(isTerminal) {
                return name;
            } else {
                StringBuilder builder = new StringBuilder();
                getText(builder);
                return builder.toString();
            }
        }
        public boolean isTerminal() {
            return isTerminal;
        }
        public String getName() {
            return name;
        }
        public ArrayList<Tree> getChildren() {
            return children;
        }
        public void setUserData(Object o) {
            userData = o;
        }
        public Object getUserData() {
            return userData;
        }
        @Override
        public String toString() {
            return children.size() == 0 ? name : "<"+name+": "+children+">";
        }
    }

    public static class TerminalContext extends Tree {
        private final %classnameLexer.Token token;
        private TerminalContext(%classnameLexer.Token token) {
            super(token.text);
            this.token = token;
            isTerminal = true;
        }
        public %classnameLexer.Token getToken() {
            return token;
        }
    }
%members
%contexts
%terminals
%builders
    public %mainRuleContext parse(String s) throws %classnameLexer.ParseException {
        return parse(new StringReader(s));
    }

    public %mainRuleContext parse(Reader r) throws %classnameLexer.ParseException {
        lex = new %classnameLexer(r);
        lex.nextToken();
        %mainRuleContext t = %mainToken();
        if(lex.curToken().type != %classnameLexer.TokenType.EOF) {
            throw new %classnameLexer.ParseException("Got EOF before actual end of string", lex.lastPos());
        }
        return t;
    }
}
